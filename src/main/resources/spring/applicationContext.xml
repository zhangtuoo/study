<beans 
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-4.1.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-4.1.xsd 
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-4.1.xsd 
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-4.1.xsd">
	
	<!-- 扫描所有带有 @Service
	@Component
	@Repository 
	@Controller
	的class 然后实例化他们-->
	<context:component-scan base-package="com.doocker.service"/>
	
	<!-- 加载数据库的配置信息 -->
	<context:property-placeholder location="classpath:db.properties"/>
	<!-- 创建连接池 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="url" value="${jdbc.url}"/>
		<property name="password" value="${jdbc.password}"/>
		<property name="username" value="${jdbc.username}"/>
		<property name="driverClassName" value="${jdbc.driver}"/>
	</bean>
	<!-- 配置sqlsessionfactory-->
	<bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath:mybatis/mybatis-config.xml"/>
		<property name="dataSource" ref="dataSource"/>
	</bean>
	<!-- 配置mapper扫描器 生成mapper借口的代理对象 交给spring管理-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.doocker.mapper"/>
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactoryBean"/>
	</bean>
	
	<!-- 事务管理器 主要处理业务层的修改表的方法，保证业务层修改的方法中所有的修改表的操作的原子性（如果成功提交时事务（session.commit()）,如果失败回滚事务（session.rollback()）） -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>
	<!-- 通知用来处理切面抛出的异常，由事务管理器去处理这个异常 -->
	<tx:advice id="advice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED"/>
		</tx:attributes>
	</tx:advice>
	
	<aop:config>
		
		<!-- 切面 com.docker.service包下面所有的类的所有的方法（无论有多少个参数） -->
		<aop:advisor advice-ref="advice" pointcut="execution(* com.doocker.service.*.*.*(..))"/>
	</aop:config>

</beans>